依赖倒转原则，抽象不应该依赖细节，细节应该依赖于抽象（针对接口编程，不要对实现编程）。

A.高层模块不应该依赖低层模块。两个都应该依赖抽象。
B.抽象不应该依赖细节。细节应该依赖抽象。



里氏代换原则，子类型必须能够替换掉它们的父类型。

只有当子类可以替换掉父类，软件单位的功能不受到影响时，父类才能真正的被复用，而子类也能够在父类的基础上增加新的行为。

由于子类的可替换性才使得使用父类类型的模块在无需修改的情况下就可以扩展。

依赖倒转其实可以说是面向对象设计的标志，用哪种语言来编写程序不重要，如果编写时考虑的都是如何针对抽象编程而不是针对细节编程，即程序中的所有依赖关系都终止于抽象类或者接口，那就是面向对象的设计，反之那就是过程化的设计了。
